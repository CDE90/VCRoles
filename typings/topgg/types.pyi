"""
This type stub file was generated by pyright.
"""

import dataclasses
import typing as t
from datetime import datetime

__all__ = ["WidgetOptions", "StatsWrapper"]
KT = t.TypeVar("KT")
VT = t.TypeVar("VT")
Colors = t.Dict[str, int]
Colours = Colors
def camel_to_snake(string: str) -> str:
    ...

def parse_vote_dict(d: dict) -> dict:
    ...

def parse_dict(d: dict) -> dict:
    ...

def parse_bot_dict(d: dict) -> dict:
    ...

def parse_user_dict(d: dict) -> dict:
    ...

def parse_bot_stats_dict(d: dict) -> dict:
    ...

class DataDict(dict, t.MutableMapping[KT, VT]):
    """Base class used to represent received data from the API.

    Every data model subclasses this class.
    """
    def __init__(self, **kwargs: VT) -> None:
        ...
    


class WidgetOptions(DataDict[str, t.Any]):
    """Model that represents widget options that are passed to Top.gg widget URL generated via
    :meth:`DBLClient.generate_widget`."""
    id: t.Optional[int]
    colors: Colors
    noavatar: bool
    format: str
    type: str
    def __init__(self, id: t.Optional[int] = ..., format: t.Optional[str] = ..., type: t.Optional[str] = ..., noavatar: bool = ..., colors: t.Optional[Colors] = ..., colours: t.Optional[Colors] = ...) -> None:
        ...
    
    @property
    def colours(self) -> Colors:
        ...
    
    @colours.setter
    def colours(self, value: Colors) -> None:
        ...
    
    def __setitem__(self, key: str, value: t.Any) -> None:
        ...
    
    def __getitem__(self, item: str) -> t.Any:
        ...
    
    def get(self, key: str, default: t.Any = ...) -> t.Any:
        """:meta private:"""
        ...
    


class BotData(DataDict[str, t.Any]):
    """Model that contains information about a listed bot on top.gg. The data this model contains can be found `here
    <https://docs.top.gg/api/bot/#bot-structure>`__."""
    id: int
    username: str
    discriminator: str
    avatar: t.Optional[str]
    def_avatar: t.Optional[str]
    prefix: str
    shortdesc: str
    longdesc: t.Optional[str]
    tags: t.List[str]
    website: t.Optional[str]
    support: t.Optional[str]
    github: t.Optional[str]
    owners: t.List[int]
    guilds: t.List[int]
    invite: t.Optional[str]
    date: datetime
    certified_bot: bool
    vanity: t.Optional[str]
    points: int
    monthly_points: int
    donatebotguildid: int
    def __init__(self, **kwargs: t.Any) -> None:
        ...
    


class BotStatsData(DataDict[str, t.Any]):
    """Model that contains information about a listed bot's guild and shard count."""
    server_count: t.Optional[int]
    shards: t.List[int]
    shard_count: t.Optional[int]
    def __init__(self, **kwargs: t.Any) -> None:
        ...
    


class BriefUserData(DataDict[str, t.Any]):
    """Model that contains brief information about a Top.gg user."""
    id: int
    username: str
    avatar: str
    def __init__(self, **kwargs: t.Any) -> None:
        ...
    


class SocialData(DataDict[str, str]):
    """Model that contains social information about a top.gg user."""
    youtube: str
    reddit: str
    twitter: str
    instagram: str
    github: str
    ...


class UserData(DataDict[str, t.Any]):
    """Model that contains information about a top.gg user. The data this model contains can be found `here
    <https://docs.top.gg/api/user/#structure>`__."""
    id: int
    username: str
    discriminator: str
    social: SocialData
    color: str
    supporter: bool
    certified_dev: bool
    mod: bool
    web_mod: bool
    admin: bool
    def __init__(self, **kwargs: t.Any) -> None:
        ...
    


class VoteDataDict(DataDict[str, t.Any]):
    """Base model that represents received information from Top.gg via webhooks."""
    type: str
    user: int
    query: DataDict
    def __init__(self, **kwargs: t.Any) -> None:
        ...
    


class BotVoteData(VoteDataDict):
    """Model that contains information about a bot vote."""
    bot: int
    is_weekend: bool
    ...


class GuildVoteData(VoteDataDict):
    """Model that contains information about a guild vote."""
    guild: int
    ...


ServerVoteData = GuildVoteData
@dataclasses.dataclass
class StatsWrapper:
    guild_count: int
    shard_count: t.Optional[int] = ...
    shard_id: t.Optional[int] = ...


