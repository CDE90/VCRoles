"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Union
from aiohttp import ClientResponse

__all__ = ["TopGGException", "ClientException", "ClientStateException", "HTTPException", "Unauthorized", "UnauthorizedDetected", "Forbidden", "NotFound", "ServerError"]
if TYPE_CHECKING:
    ...
class TopGGException(Exception):
    """Base exception class for topggpy.

    Ideally speaking, this could be caught to handle any exceptions thrown from this library.
    """
    ...


class ClientException(TopGGException):
    """Exception that's thrown when an operation in the :class:`~.DBLClient` fails.

    These are usually for exceptions that happened due to user input.
    """
    ...


class ClientStateException(ClientException):
    """Exception that's thrown when an operation happens in a closed :obj:`~.DBLClient` instance."""
    ...


class HTTPException(TopGGException):
    """Exception that's thrown when an HTTP request operation fails.

    Attributes:
        response (:class:`aiohttp.ClientResponse`)
            The response of the failed HTTP request.
        text (str)
            The text of the error. Could be an empty string.
    """
    def __init__(self, response: ClientResponse, message: Union[dict, str]) -> None:
        ...
    


class Unauthorized(HTTPException):
    """Exception that's thrown when status code 401 occurs."""
    ...


class UnauthorizedDetected(TopGGException):
    """Exception that's thrown when no API Token is provided."""
    ...


class Forbidden(HTTPException):
    """Exception that's thrown when status code 403 occurs."""
    ...


class NotFound(HTTPException):
    """Exception that's thrown when status code 404 occurs."""
    ...


class ServerError(HTTPException):
    """Exception that's thrown when Top.gg returns "Server Error" responses (status codes such as 500 and 503)."""
    ...


