"""
This type stub file was generated by pyright.
"""

import typing as t

__all__ = ["data", "DataContainerMixin"]
T = t.TypeVar("T")
DataContainerT = t.TypeVar("DataContainerT", bound="DataContainerMixin")
def data(type_: t.Type[T]) -> T:
    """
    Represents the injected data. This should be set as the parameter's default value.

    Args:
        `type_` (:obj:`type` [ :obj:`T`])
            The type of the injected data.

    Returns:
        :obj:`T`: The injected data of type T.

    :Example:
        .. code-block:: python

            import topgg

            # In this example, we fetch the stats from a Discord client instance.
            client = Client(...)
            dblclient = topgg.DBLClient(TOKEN).set_data(client)
            autopost: topgg.AutoPoster = dblclient.autopost()


            @autopost.stats()
            def get_stats(client: Client = topgg.data(Client)):
                return topgg.StatsWrapper(guild_count=len(client.guilds), shard_count=len(client.shards))
    """
    ...

class Data(t.Generic[T]):
    __slots__ = ...
    def __init__(self, type_: t.Type[T]) -> None:
        ...
    


class DataContainerMixin:
    """
    A class that holds data.

    This is useful for injecting some data so that they're available
    as arguments in your functions.
    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def set_data(self: DataContainerT, data_: t.Any, *, override: bool = ...) -> DataContainerT:
        """
        Sets data to be available in your functions.

        Args:
            `data_` (Any)
                The data to be injected.
            override (:obj:`bool`)
                Whether or not to override another instance that already exists.

        Raises:
            :exc:`~.errors.TopGGException`
                If override is False and another instance of the same type exists.
        """
        ...
    
    @t.overload
    def get_data(self, type_: t.Type[T]) -> t.Optional[T]:
        ...
    
    @t.overload
    def get_data(self, type_: t.Type[T], default: t.Any = ...) -> t.Any:
        ...
    
    def get_data(self, type_: t.Any, default: t.Any = ...) -> t.Any:
        """Gets the injected data."""
        ...
    


