"""
This type stub file was generated by pyright.
"""

import typing as t
import aiohttp
from . import types
from .autopost import AutoPoster
from .data import DataContainerMixin
from .http import HTTPClient

__all__ = ["DBLClient"]
class DBLClient(DataContainerMixin):
    """Represents a client connection that connects to Top.gg.

    This class is used to interact with the Top.gg API.

    .. _aiohttp session: https://aiohttp.readthedocs.io/en/stable/client_reference.html#client-session

    Args:
        token (:obj:`str`): Your bot's Top.gg API Token.

    Keyword Args:
        session (:class:`aiohttp.ClientSession`)
            An `aiohttp session`_ to use for requests to the API.
        **kwargs:
            Arbitrary kwargs to be passed to :class:`aiohttp.ClientSession` if session was not provided.
    """
    __slots__ = ...
    http: HTTPClient
    def __init__(self, token: str, *, session: t.Optional[aiohttp.ClientSession] = ..., **kwargs: t.Any) -> None:
        ...
    
    @property
    def is_closed(self) -> bool:
        ...
    
    async def get_weekend_status(self) -> bool:
        """Gets weekend status from Top.gg.

        Returns:
            :obj:`bool`: The boolean value of weekend status.

        Raises:
            :exc:`~.errors.ClientStateException`
                If the client has been closed.
        """
        ...
    
    @t.overload
    async def post_guild_count(self, stats: types.StatsWrapper) -> None:
        ...
    
    @t.overload
    async def post_guild_count(self, *, guild_count: t.Union[int, t.List[int]], shard_count: t.Optional[int] = ..., shard_id: t.Optional[int] = ...) -> None:
        ...
    
    async def post_guild_count(self, stats: t.Any = ..., *, guild_count: t.Any = ..., shard_count: t.Any = ..., shard_id: t.Any = ...) -> None:
        """Posts your bot's guild count and shards info to Top.gg.

        .. _0 based indexing : https://en.wikipedia.org/wiki/Zero-based_numbering

        Warning:
            You can't provide both args and kwargs at once.

        Args:
            stats (:obj:`~.types.StatsWrapper`)
                An instance of StatsWrapper containing guild_count, shard_count, and shard_id.

        Keyword Arguments:
            guild_count (Optional[Union[:obj:`int`, List[:obj:`int`]]])
                Number of guilds the bot is in. Applies the number to a shard instead if shards are specified.
                If not specified, length of provided client's property `.guilds` will be posted.
            shard_count (Optional[:obj:`int`])
                The total number of shards.
            shard_id (Optional[:obj:`int`])
                The index of the current shard. Top.gg uses `0 based indexing`_ for shards.

        Raises:
            TypeError
                If no argument is provided.
            :exc:`~.errors.ClientStateException`
                If the client has been closed.
        """
        ...
    
    async def get_guild_count(self) -> types.BotStatsData:
        """Gets this bot's guild count and shard info from Top.gg.

        Returns:
            :obj:`~.types.BotStatsData`:
                The guild count and shards of a bot on Top.gg.

        Raises:
            :exc:`~.errors.ClientStateException`
                If the client has been closed.
        """
        ...
    
    async def get_bot_votes(self) -> t.List[types.BriefUserData]:
        """Gets information about last 1000 votes for your bot on Top.gg.

        Note:
            This API endpoint is only available to the bot's owner.

        Returns:
            List[:obj:`~.types.BriefUserData`]:
                Users who voted for your bot.

        Raises:
            :exc:`~.errors.ClientStateException`
                If the client has been closed.
        """
        ...
    
    async def get_bot_info(self, bot_id: t.Optional[int] = ...) -> types.BotData:
        """This function is a coroutine.

        Gets information about a bot from Top.gg.

        Args:
            bot_id (int)
                ID of the bot to look up. Defaults to this bot's ID.

        Returns:
            :obj:`~.types.BotData`:
                Information on the bot you looked up. Returned data can be found
                `here <https://docs.top.gg/api/bot/#bot-structure>`_.

        Raises:
            :exc:`~.errors.ClientStateException`
                If the client has been closed.
        """
        ...
    
    async def get_bots(self, limit: int = ..., offset: int = ..., sort: t.Optional[str] = ..., search: t.Optional[t.Dict[str, t.Any]] = ..., fields: t.Optional[t.List[str]] = ...) -> types.DataDict[str, t.Any]:
        """
        Warning:
            This function is deprecated.
        """
        ...
    
    async def get_user_info(self, user_id: int) -> types.UserData:
        """This function is a coroutine.

        Gets information about a user on Top.gg.

        Args:
            user_id (int)
                ID of the user to look up.

        Returns:
            :obj:`~.types.UserData`:
                Information about a Top.gg user.

        Raises:
            :exc:`~.errors.ClientStateException`
                If the client has been closed.
        """
        ...
    
    async def get_user_vote(self, user_id: int) -> bool:
        """Gets information about a user's vote for your bot on Top.gg.

        Args:
            user_id (int)
                ID of the user.

        Returns:
            :obj:`bool`: Info about the user's vote.

        Raises:
            :exc:`~.errors.ClientStateException`
                If the client has been closed.
        """
        ...
    
    def generate_widget(self, *, options: types.WidgetOptions) -> str:
        """
        Generates a Top.gg widget from the provided :obj:`~.types.WidgetOptions` object.

        Keyword Arguments:
            options (:obj:`~.types.WidgetOptions`)
                A :obj:`~.types.WidgetOptions` object containing widget parameters.

        Returns:
            str: Generated widget URL.

        Raises:
            TypeError:
                If options passed is not of type WidgetOptions.
        """
        ...
    
    async def close(self) -> None:
        """Closes all connections."""
        ...
    
    def autopost(self) -> AutoPoster:
        """Returns a helper instance for auto-posting.

        Note:
            The second time you call this method, it'll return the same instance
            as the one returned from the first call.

        Returns:
            :obj:`~.autopost.AutoPoster`: An instance of AutoPoster.
        """
        ...
    


