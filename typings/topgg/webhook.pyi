"""
This type stub file was generated by pyright.
"""

import enum
import typing as t
from aiohttp import web
from .data import DataContainerMixin

__all__ = ["endpoint", "BoundWebhookEndpoint", "WebhookEndpoint", "WebhookManager", "WebhookType"]
if t.TYPE_CHECKING:
    ...
T = t.TypeVar("T", bound="WebhookEndpoint")
_HandlerT = t.Callable[["Request"], t.Awaitable["StreamResponse"]]
class WebhookType(enum.Enum):
    """An enum that represents the type of an endpoint."""
    BOT = ...
    GUILD = ...


class WebhookManager(DataContainerMixin):
    """
    A class for managing Top.gg webhooks.
    """
    __app: web.Application
    _webserver: web.TCPSite
    _is_closed: bool
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    @t.overload
    def endpoint(self, endpoint_: None = ...) -> BoundWebhookEndpoint:
        ...
    
    @t.overload
    def endpoint(self, endpoint_: WebhookEndpoint) -> WebhookManager:
        ...
    
    def endpoint(self, endpoint_: t.Optional[WebhookEndpoint] = ...) -> t.Any:
        """Helper method that returns a WebhookEndpoint object.

        Args:
            `endpoint_` (Optional[:obj:`WebhookEndpoint`])
                The endpoint to add.

        Returns:
            Union[:obj:`WebhookManager`, :obj:`BoundWebhookEndpoint`]:
                An instance of :obj:`WebhookManager` if endpoint was provided,
                otherwise :obj:`BoundWebhookEndpoint`.

        Raises:
            :exc:`~.errors.TopGGException`
                If the endpoint is lacking attributes.
        """
        ...
    
    async def start(self, port: int) -> None:
        """Runs the webhook.

        Args:
            port (int)
                The port to run the webhook on.
        """
        ...
    
    @property
    def is_running(self) -> bool:
        """Returns whether or not the webserver is running."""
        ...
    
    @property
    def app(self) -> web.Application:
        """Returns the internal web application that handles webhook requests.

        Returns:
            :class:`aiohttp.web.Application`:
                The internal web application.
        """
        ...
    
    async def close(self) -> None:
        """Stops the webhook."""
        ...
    


CallbackT = t.Callable[..., t.Any]
class WebhookEndpoint:
    """
    A helper class to setup webhook endpoint.
    """
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, *args: t.Any, **kwargs: t.Any) -> t.Any:
        ...
    
    def type(self: T, type_: WebhookType) -> T:
        """Sets the type of this endpoint.

        Args:
            `type_` (:obj:`WebhookType`)
                The type of the endpoint.

        Returns:
            :obj:`WebhookEndpoint`
        """
        ...
    
    def route(self: T, route_: str) -> T:
        """
        Sets the route of this endpoint.

        Args:
            `route_` (str)
                The route of this endpoint.

        Returns:
            :obj:`WebhookEndpoint`
        """
        ...
    
    def auth(self: T, auth_: str) -> T:
        """
        Sets the auth of this endpoint.

        Args:
            `auth_` (str)
                The auth of this endpoint.

        Returns:
            :obj:`WebhookEndpoint`
        """
        ...
    
    @t.overload
    def callback(self, callback_: None) -> t.Callable[[CallbackT], CallbackT]:
        ...
    
    @t.overload
    def callback(self: T, callback_: CallbackT) -> T:
        ...
    
    def callback(self, callback_: t.Any = ...) -> t.Any:
        """
        Registers a vote callback, called whenever this endpoint receives POST requests.

        The callback can be either sync or async.
        This method can be used as a decorator or a decorator factory.

        :Example:
            .. code-block:: python

                import topgg

                webhook_manager = topgg.WebhookManager()
                endpoint = topgg.WebhookEndpoint().type(topgg.WebhookType.BOT).route("/dblwebhook").auth("youshallnotpass")

                # The following are valid.
                endpoint.callback(lambda vote_data: print("Receives a vote!", vote_data))


                # Used as decorator, the decorated function will become the WebhookEndpoint object.
                @endpoint.callback
                def endpoint(vote_data: topgg.BotVoteData): ...


                # Used as decorator factory, the decorated function will still be the function itself.
                @endpoint.callback()
                def on_vote(vote_data: topgg.BotVoteData): ...


                webhook_manager.endpoint(endpoint)
        """
        ...
    


class BoundWebhookEndpoint(WebhookEndpoint):
    """
    A WebhookEndpoint with a WebhookManager bound to it.

    You can instantiate this object using the :meth:`WebhookManager.endpoint` method.

    :Example:
        .. code-block:: python

            import topgg

            webhook_manager = (
                topgg.WebhookManager().endpoint().type(topgg.WebhookType.BOT).route("/dblwebhook").auth("youshallnotpass")
            )

            # The following are valid.
            endpoint.callback(lambda vote_data: print("Receives a vote!", vote_data))


            # Used as decorator, the decorated function will become the BoundWebhookEndpoint object.
            @endpoint.callback
            def endpoint(vote_data: topgg.BotVoteData): ...


            # Used as decorator factory, the decorated function will still be the function itself.
            @endpoint.callback()
            def on_vote(vote_data: topgg.BotVoteData): ...


            endpoint.add_to_manager()
    """
    __slots__ = ...
    def __init__(self, manager: WebhookManager) -> None:
        ...
    
    def add_to_manager(self) -> WebhookManager:
        """
        Adds this endpoint to the webhook manager.

        Returns:
            :obj:`WebhookManager`

        Raises:
            :obj:`errors.TopGGException`:
                If the object lacks attributes.
        """
        ...
    


def endpoint(route: str, type: WebhookType, auth: str = ...) -> t.Callable[[t.Callable[..., t.Any]], WebhookEndpoint]:
    """
    A decorator factory for instantiating WebhookEndpoint.

    Args:
        route (str)
            The route for the endpoint.
        type (WebhookType)
            The type of the endpoint.
        auth (str)
            The auth for the endpoint.

    Returns:
        Callable[[Callable[..., Any]], :obj:`WebhookEndpoint`]:
            The actual decorator.

    :Example:
        .. code-block:: python

            import topgg


            @topgg.endpoint("/dblwebhook", WebhookType.BOT, "youshallnotpass")
            async def on_vote(
                vote_data: topgg.BotVoteData,
                # database here is an injected data
                database: Database = topgg.data(Database),
            ): ...
    """
    ...

